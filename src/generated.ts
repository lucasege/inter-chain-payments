// Generated by @wagmi/cli@1.1.0 on 6/8/2023 at 11:24:29â€¯AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AxelarExecutable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const axelarExecutableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'gateway_', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'InvalidAddress' },
  { type: 'error', inputs: [], name: 'NotApprovedByGateway' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'executeWithToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gateway',
    outputs: [
      { name: '', internalType: 'contract IAxelarGateway', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseAccountABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasePaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basePaymasterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'mode',
        internalType: 'enum IPaymaster.PostOpMode',
        type: 'uint8',
      },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'maxCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatePaymasterUserOp',
    outputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const counterAddress = {
  1: '0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac',
  5: '0x78991BB1D194C1235fe285240af8489CFA552151',
  31337: '0xbe18A1B61ceaF59aEB6A9bC81AB4FB87D56Ba167',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const counterConfig = {
  address: counterAddress,
  abi: counterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DepositPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const depositPaymasterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_entryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'COST_OF_POST',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDepositFor',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      {
        name: 'tokenPriceOracle',
        internalType: 'contract IOracle',
        type: 'address',
      },
    ],
    name: 'addToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract IERC20', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'balances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'depositInfo',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: '_unlockBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockTokenDeposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    name: 'oracles',
    outputs: [{ name: '', internalType: 'contract IOracle', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'mode',
        internalType: 'enum IPaymaster.PostOpMode',
        type: 'uint8',
      },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'unlockBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockTokenDeposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'maxCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatePaymasterUserOp',
    outputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTokensTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967ProxyABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_logic', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const entryPointABI = [
  {
    type: 'error',
    inputs: [
      { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
      { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
      { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
      { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'ExecutionResult',
  },
  {
    type: 'error',
    inputs: [
      { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'FailedOp',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'SenderAddressResult',
  },
  {
    type: 'error',
    inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
    name: 'SignatureValidationFailed',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'ValidationResult',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'aggregatorInfo',
        internalType: 'struct IEntryPoint.AggregatorStakeInfo',
        type: 'tuple',
        components: [
          { name: 'aggregator', internalType: 'address', type: 'address' },
          {
            name: 'stakeInfo',
            internalType: 'struct IStakeManager.StakeInfo',
            type: 'tuple',
            components: [
              { name: 'stake', internalType: 'uint256', type: 'uint256' },
              {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    name: 'ValidationResultWithAggregation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'factory',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AccountDeployed',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'BeforeExecution' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'aggregator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SignatureAggregatorChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'actualGasCost',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actualGasUsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UserOperationEvent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'revertReason',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'UserOperationRevertReason',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SIG_VALIDATION_FAILED',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'initCode', internalType: 'bytes', type: 'bytes' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_validateSenderAndPaymaster',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'deposits',
    outputs: [
      { name: 'deposit', internalType: 'uint112', type: 'uint112' },
      { name: 'staked', internalType: 'bool', type: 'bool' },
      { name: 'stake', internalType: 'uint112', type: 'uint112' },
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
      { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
    name: 'getSenderAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'getUserOpHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opsPerAggregator',
        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
        type: 'tuple[]',
        components: [
          {
            name: 'userOps',
            internalType: 'struct UserOperation[]',
            type: 'tuple[]',
            components: [
              { name: 'sender', internalType: 'address', type: 'address' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'initCode', internalType: 'bytes', type: 'bytes' },
              { name: 'callData', internalType: 'bytes', type: 'bytes' },
              {
                name: 'callGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'verificationGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'preVerificationGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'paymasterAndData',
                internalType: 'bytes',
                type: 'bytes',
              },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'aggregator',
            internalType: 'contract IAggregator',
            type: 'address',
          },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleAggregatedOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'opInfo',
        internalType: 'struct EntryPoint.UserOpInfo',
        type: 'tuple',
        components: [
          {
            name: 'mUserOp',
            internalType: 'struct EntryPoint.MemoryUserOp',
            type: 'tuple',
            components: [
              { name: 'sender', internalType: 'address', type: 'address' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              {
                name: 'callGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'verificationGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'preVerificationGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'paymaster', internalType: 'address', type: 'address' },
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'contextOffset', internalType: 'uint256', type: 'uint256' },
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'innerHandleOp',
    outputs: [
      { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'nonceSequenceNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateHandleOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'simulateValidation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAggregatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOps',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregateSignatures',
    outputs: [
      { name: 'aggregatedSignature', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOps',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'validateSignatures',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'validateUserOpSignature',
    outputs: [{ name: 'sigForUserOp', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAxelarExecutable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAxelarExecutableABI = [
  { type: 'error', inputs: [], name: 'InvalidAddress' },
  { type: 'error', inputs: [], name: 'NotApprovedByGateway' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'executeWithToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gateway',
    outputs: [
      { name: '', internalType: 'contract IAxelarGateway', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAxelarGasService
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAxelarGasServiceABI = [
  { type: 'error', inputs: [], name: 'InvalidAddress' },
  { type: 'error', inputs: [], name: 'InvalidAmounts' },
  { type: 'error', inputs: [], name: 'NotCollector' },
  { type: 'error', inputs: [], name: 'NothingReceived' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'logIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'gasToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ExpressGasAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'logIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'gasToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'gasToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasPaidForContractCall',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'gasToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasPaidForContractCallWithToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'gasToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GasPaidForExpressCallWithToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'logIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NativeExpressGasAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'logIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NativeGasAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NativeGasPaidForContractCall',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NativeGasPaidForContractCallWithToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'gasFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NativeGasPaidForExpressCallWithToken',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'txIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'gasFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addExpressGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'txIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'gasFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addGas',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'logIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addNativeExpressGas',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'logIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addNativeGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiver', internalType: 'address payable', type: 'address' },
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'collectFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'gasCollector',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'gasFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payGasForContractCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'gasFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payGasForContractCallWithToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'gasFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payGasForExpressCallWithToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payNativeGasForContractCall',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payNativeGasForContractCallWithToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'refundAddress', internalType: 'address', type: 'address' },
    ],
    name: 'payNativeGasForExpressCallWithToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiver', internalType: 'address payable', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'refund',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAxelarGateway
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAxelarGatewayABI = [
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'BurnFailed',
  },
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'ExceedMintLimit',
  },
  { type: 'error', inputs: [], name: 'InvalidAmount' },
  { type: 'error', inputs: [], name: 'InvalidAuthModule' },
  { type: 'error', inputs: [], name: 'InvalidChainId' },
  { type: 'error', inputs: [], name: 'InvalidCodeHash' },
  { type: 'error', inputs: [], name: 'InvalidCommands' },
  { type: 'error', inputs: [], name: 'InvalidSetMintLimitsParams' },
  { type: 'error', inputs: [], name: 'InvalidTokenDeployer' },
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'MintFailed',
  },
  { type: 'error', inputs: [], name: 'NotProxy' },
  { type: 'error', inputs: [], name: 'NotSelf' },
  { type: 'error', inputs: [], name: 'SetupFailed' },
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'TokenAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'TokenContractDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'TokenDeployFailed',
  },
  {
    type: 'error',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationContractAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'payload', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ContractCall',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'commandId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sourceChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'sourceAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sourceTxHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'sourceEventIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ContractCallApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'commandId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sourceChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'sourceAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sourceTxHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'sourceEventIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ContractCallApprovedWithMint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationContractAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'payload', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ContractCallWithToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'commandId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOperatorsData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'OperatorshipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'tokenAddresses',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TokenDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'limit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenMintLimitUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destinationChain',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'destinationAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenSent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'adminEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'adminThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'epoch', internalType: 'uint256', type: 'uint256' }],
    name: 'admins',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allTokensFrozen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'authModule',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'contractAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callContract',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'contractAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'callContractWithToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'commandId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isCommandExecuted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'contractAddress', internalType: 'address', type: 'address' },
      { name: 'payloadHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isContractCallAndMintApproved',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'contractAddress', internalType: 'address', type: 'address' },
      { name: 'payloadHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isContractCallApproved',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'sendToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'symbols', internalType: 'string[]', type: 'string[]' },
      { name: 'limits', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setTokenMintLimits',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'params', internalType: 'bytes', type: 'bytes' }],
    name: 'setup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'tokenAddresses',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenDeployer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'tokenFrozen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'tokenMintAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'tokenMintLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      {
        name: 'newImplementationCodeHash',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      { name: 'setupParams', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payloadHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'validateContractCall',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payloadHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateContractCallAndMint',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEntryPointABI = [
  {
    type: 'error',
    inputs: [
      { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
      { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
      { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
      { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'ExecutionResult',
  },
  {
    type: 'error',
    inputs: [
      { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'FailedOp',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'SenderAddressResult',
  },
  {
    type: 'error',
    inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
    name: 'SignatureValidationFailed',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'ValidationResult',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'aggregatorInfo',
        internalType: 'struct IEntryPoint.AggregatorStakeInfo',
        type: 'tuple',
        components: [
          { name: 'aggregator', internalType: 'address', type: 'address' },
          {
            name: 'stakeInfo',
            internalType: 'struct IStakeManager.StakeInfo',
            type: 'tuple',
            components: [
              { name: 'stake', internalType: 'uint256', type: 'uint256' },
              {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    name: 'ValidationResultWithAggregation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'factory',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AccountDeployed',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'BeforeExecution' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'aggregator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SignatureAggregatorChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'actualGasCost',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actualGasUsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UserOperationEvent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'revertReason',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'UserOperationRevertReason',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
    name: 'getSenderAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'getUserOpHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opsPerAggregator',
        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
        type: 'tuple[]',
        components: [
          {
            name: 'userOps',
            internalType: 'struct UserOperation[]',
            type: 'tuple[]',
            components: [
              { name: 'sender', internalType: 'address', type: 'address' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'initCode', internalType: 'bytes', type: 'bytes' },
              { name: 'callData', internalType: 'bytes', type: 'bytes' },
              {
                name: 'callGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'verificationGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'preVerificationGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'paymasterAndData',
                internalType: 'bytes',
                type: 'bytes',
              },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'aggregator',
            internalType: 'contract IAggregator',
            type: 'address',
          },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleAggregatedOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateHandleOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'simulateValidation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INonceManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iNonceManagerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC777Recipient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc777RecipientABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOracleABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ethOutput', internalType: 'uint256', type: 'uint256' }],
    name: 'getTokenValueOfEth',
    outputs: [{ name: 'tokenInput', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStakeManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPaymasterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'mode',
        internalType: 'enum IPaymaster.PostOpMode',
        type: 'uint8',
      },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'maxCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatePaymasterUserOp',
    outputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InterChainPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const interChainPaymasterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_entryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
      },
      { name: '_sourceAccount', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'COST_OF_POST',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addDepositFor',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      {
        name: 'tokenPriceOracle',
        internalType: 'contract IOracle',
        type: 'address',
      },
    ],
    name: 'addToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract IERC20', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'balances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'depositInfo',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: '_unlockBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'frontRunValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'frontRunUserOp',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockTokenDeposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    name: 'oracles',
    outputs: [{ name: '', internalType: 'contract IOracle', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'mode',
        internalType: 'enum IPaymaster.PostOpMode',
        type: 'uint8',
      },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
      { name: 'frontRunValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'simulateFrontRun',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'unlockBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockTokenDeposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'maxCost', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatePaymasterUserOp',
    outputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTokensTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NonceManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nonceManagerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'nonceSequenceNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReceiverAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const receiverAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'anEntryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SimpleAccountInitialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'addDeposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'func', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address[]', type: 'address[]' },
      { name: 'func', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'executeBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'anOwner', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawDepositTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReceiverAccountFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const receiverAccountFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_entryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'accountImplementation',
    outputs: [
      { name: '', internalType: 'contract ReceiverAccount', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createAccount',
    outputs: [
      {
        name: 'ret',
        internalType: 'contract ReceiverAccount',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SenderCreator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const senderCreatorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
    name: 'createSender',
    outputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SimpleAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const simpleAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'anEntryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entryPoint',
        internalType: 'contract IEntryPoint',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SimpleAccountInitialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'addDeposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'func', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address[]', type: 'address[]' },
      { name: 'func', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'executeBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'anOwner', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawDepositTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sink
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sinkABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'sink',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SourceAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sourceAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'newOwner', internalType: 'address', type: 'address' },
      { name: '_entrypoint', internalType: 'address', type: 'address' },
      { name: '_authorizedSpender', internalType: 'address', type: 'address' },
      { name: 'gateway_', internalType: 'address', type: 'address' },
      { name: 'gasReceiver_', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidAddress' },
  { type: 'error', inputs: [], name: 'NotApprovedByGateway' },
  {
    type: 'error',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'UserOpError',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'sourceAddress', internalType: 'string', type: 'string' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'executeWithToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasService',
    outputs: [
      { name: '', internalType: 'contract IAxelarGasService', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gateway',
    outputs: [
      { name: '', internalType: 'contract IAxelarGateway', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'sigData',
        internalType: 'struct InterChainSigData',
        type: 'tuple',
        components: [
          { name: 'remoteChainId', internalType: 'uint256', type: 'uint256' },
          { name: 'sourceChainId', internalType: 'uint256', type: 'uint256' },
          { name: 'remoteNonce', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'helper_createAndSignInterChainUserOp',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'sigData',
        internalType: 'struct InterChainSigData',
        type: 'tuple',
        components: [
          { name: 'remoteChainId', internalType: 'uint256', type: 'uint256' },
          { name: 'sourceChainId', internalType: 'uint256', type: 'uint256' },
          { name: 'remoteNonce', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'helper_hashSigData',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isWithdrawPending',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'proveWithdraw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'destinationChain', internalType: 'string', type: 'string' },
      { name: 'destinationAddress', internalType: 'string', type: 'string' },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'runProveWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'spenderWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'startWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'value',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'withdrawTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakeManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'deposits',
    outputs: [
      { name: 'deposit', internalType: 'uint112', type: 'uint112' },
      { name: 'staked', internalType: 'bool', type: 'bool' },
      { name: 'stake', internalType: 'uint112', type: 'uint112' },
      { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
      { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testOracleABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ethOutput', internalType: 'uint256', type: 'uint256' }],
    name: 'getTokenValueOfEth',
    outputs: [{ name: 'tokenInput', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenCallbackHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenCallbackHandlerABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Strings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stringsABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SignedMath
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const signedMathABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ECDSA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ecdsaABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Math
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mathABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InterChainSigDataLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const interChainSigDataLibABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Address
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const addressABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Context
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeErc20ABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Create2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const create2ABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StorageSlot
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageSlotABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Exec
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const execABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardABI = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link axelarExecutableABI}__.
 */
export function useAxelarExecutableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof axelarExecutableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof axelarExecutableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: axelarExecutableABI,
    ...config,
  } as UseContractReadConfig<
    typeof axelarExecutableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link axelarExecutableABI}__ and `functionName` set to `"gateway"`.
 */
export function useAxelarExecutableGateway<
  TFunctionName extends 'gateway',
  TSelectData = ReadContractResult<typeof axelarExecutableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof axelarExecutableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: axelarExecutableABI,
    functionName: 'gateway',
    ...config,
  } as UseContractReadConfig<
    typeof axelarExecutableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__.
 */
export function useAxelarExecutableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof axelarExecutableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof axelarExecutableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof axelarExecutableABI, TFunctionName, TMode>({
    abi: axelarExecutableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function useAxelarExecutableExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof axelarExecutableABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof axelarExecutableABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof axelarExecutableABI, 'execute', TMode>({
    abi: axelarExecutableABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function useAxelarExecutableExecuteWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof axelarExecutableABI,
          'executeWithToken'
        >['request']['abi'],
        'executeWithToken',
        TMode
      > & { functionName?: 'executeWithToken' }
    : UseContractWriteConfig<
        typeof axelarExecutableABI,
        'executeWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'executeWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof axelarExecutableABI,
    'executeWithToken',
    TMode
  >({
    abi: axelarExecutableABI,
    functionName: 'executeWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__.
 */
export function usePrepareAxelarExecutableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof axelarExecutableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: axelarExecutableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof axelarExecutableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareAxelarExecutableExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof axelarExecutableABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: axelarExecutableABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof axelarExecutableABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link axelarExecutableABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function usePrepareAxelarExecutableExecuteWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof axelarExecutableABI,
      'executeWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: axelarExecutableABI,
    functionName: 'executeWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof axelarExecutableABI,
    'executeWithToken'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useBaseAccountEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof baseAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"getNonce"`.
 */
export function useBaseAccountGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof baseAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof baseAccountABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof baseAccountABI, TFunctionName, TMode>({
    abi: baseAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useBaseAccountValidateUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseAccountABI,
          'validateUserOp'
        >['request']['abi'],
        'validateUserOp',
        TMode
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<typeof baseAccountABI, 'validateUserOp', TMode> & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<typeof baseAccountABI, 'validateUserOp', TMode>({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function usePrepareBaseAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareBaseAccountValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseAccountABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseAccountABI, 'validateUserOp'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useBasePaymasterEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"getDeposit"`.
 */
export function useBasePaymasterGetDeposit<
  TFunctionName extends 'getDeposit',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'getDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"owner"`.
 */
export function useBasePaymasterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof basePaymasterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, TFunctionName, TMode>({
    abi: basePaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function useBasePaymasterAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'addStake', TMode>({
    abi: basePaymasterABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function useBasePaymasterDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'deposit', TMode>({
    abi: basePaymasterABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function useBasePaymasterPostOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'postOp'
        >['request']['abi'],
        'postOp',
        TMode
      > & { functionName?: 'postOp' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'postOp', TMode> & {
        abi?: never
        functionName?: 'postOp'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'postOp', TMode>({
    abi: basePaymasterABI,
    functionName: 'postOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBasePaymasterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'renounceOwnership', TMode>({
    abi: basePaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBasePaymasterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'transferOwnership', TMode>({
    abi: basePaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useBasePaymasterUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'unlockStake', TMode>({
    abi: basePaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function useBasePaymasterValidatePaymasterUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'validatePaymasterUserOp'
        >['request']['abi'],
        'validatePaymasterUserOp',
        TMode
      > & { functionName?: 'validatePaymasterUserOp' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'validatePaymasterUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validatePaymasterUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof basePaymasterABI,
    'validatePaymasterUserOp',
    TMode
  >({
    abi: basePaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useBasePaymasterWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'withdrawStake',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'withdrawStake', TMode>({
    abi: basePaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useBasePaymasterWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'withdrawTo', TMode> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'withdrawTo', TMode>({
    abi: basePaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function usePrepareBasePaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareBasePaymasterAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareBasePaymasterDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function usePrepareBasePaymasterPostOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'postOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'postOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'postOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBasePaymasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBasePaymasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareBasePaymasterUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function usePrepareBasePaymasterValidatePaymasterUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basePaymasterABI,
      'validatePaymasterUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'validatePaymasterUserOp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareBasePaymasterWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareBasePaymasterWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof basePaymasterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePaymasterABI,
    ...config,
  } as UseContractEventConfig<typeof basePaymasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePaymasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBasePaymasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof basePaymasterABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePaymasterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof basePaymasterABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof counterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof counterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'increment'
        >['request']['abi'],
        'increment',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'increment' }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increment'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof counterABI, 'increment', TMode>({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof counterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'setNumber'
        >['request']['abi'],
        'setNumber',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setNumber' }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setNumber'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof counterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: counterABI,
    address: counterAddress[chainId as keyof typeof counterAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__.
 */
export function useDepositPaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"COST_OF_POST"`.
 */
export function useDepositPaymasterCostOfPost<
  TFunctionName extends 'COST_OF_POST',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'COST_OF_POST',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"balances"`.
 */
export function useDepositPaymasterBalances<
  TFunctionName extends 'balances',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'balances',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"depositInfo"`.
 */
export function useDepositPaymasterDepositInfo<
  TFunctionName extends 'depositInfo',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'depositInfo',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useDepositPaymasterEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"getDeposit"`.
 */
export function useDepositPaymasterGetDeposit<
  TFunctionName extends 'getDeposit',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'getDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"oracles"`.
 */
export function useDepositPaymasterOracles<
  TFunctionName extends 'oracles',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'oracles',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"owner"`.
 */
export function useDepositPaymasterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"unlockBlock"`.
 */
export function useDepositPaymasterUnlockBlock<
  TFunctionName extends 'unlockBlock',
  TSelectData = ReadContractResult<typeof depositPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof depositPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: depositPaymasterABI,
    functionName: 'unlockBlock',
    ...config,
  } as UseContractReadConfig<
    typeof depositPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__.
 */
export function useDepositPaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, TFunctionName, TMode>({
    abi: depositPaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addDepositFor"`.
 */
export function useDepositPaymasterAddDepositFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'addDepositFor'
        >['request']['abi'],
        'addDepositFor',
        TMode
      > & { functionName?: 'addDepositFor' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'addDepositFor',
        TMode
      > & {
        abi?: never
        functionName?: 'addDepositFor'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'addDepositFor', TMode>({
    abi: depositPaymasterABI,
    functionName: 'addDepositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function useDepositPaymasterAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof depositPaymasterABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'addStake', TMode>({
    abi: depositPaymasterABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addToken"`.
 */
export function useDepositPaymasterAddToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'addToken'
        >['request']['abi'],
        'addToken',
        TMode
      > & { functionName?: 'addToken' }
    : UseContractWriteConfig<typeof depositPaymasterABI, 'addToken', TMode> & {
        abi?: never
        functionName?: 'addToken'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'addToken', TMode>({
    abi: depositPaymasterABI,
    functionName: 'addToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function useDepositPaymasterDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof depositPaymasterABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'deposit', TMode>({
    abi: depositPaymasterABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"lockTokenDeposit"`.
 */
export function useDepositPaymasterLockTokenDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'lockTokenDeposit'
        >['request']['abi'],
        'lockTokenDeposit',
        TMode
      > & { functionName?: 'lockTokenDeposit' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'lockTokenDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'lockTokenDeposit'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'lockTokenDeposit',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'lockTokenDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function useDepositPaymasterPostOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'postOp'
        >['request']['abi'],
        'postOp',
        TMode
      > & { functionName?: 'postOp' }
    : UseContractWriteConfig<typeof depositPaymasterABI, 'postOp', TMode> & {
        abi?: never
        functionName?: 'postOp'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'postOp', TMode>({
    abi: depositPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDepositPaymasterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'renounceOwnership',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDepositPaymasterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'transferOwnership',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useDepositPaymasterUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'unlockStake',
        TMode
      > & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'unlockStake', TMode>({
    abi: depositPaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"unlockTokenDeposit"`.
 */
export function useDepositPaymasterUnlockTokenDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'unlockTokenDeposit'
        >['request']['abi'],
        'unlockTokenDeposit',
        TMode
      > & { functionName?: 'unlockTokenDeposit' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'unlockTokenDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'unlockTokenDeposit'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'unlockTokenDeposit',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'unlockTokenDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function useDepositPaymasterValidatePaymasterUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'validatePaymasterUserOp'
        >['request']['abi'],
        'validatePaymasterUserOp',
        TMode
      > & { functionName?: 'validatePaymasterUserOp' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'validatePaymasterUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validatePaymasterUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'validatePaymasterUserOp',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useDepositPaymasterWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'withdrawStake',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'withdrawStake', TMode>({
    abi: depositPaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useDepositPaymasterWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'withdrawTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof depositPaymasterABI, 'withdrawTo', TMode>({
    abi: depositPaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawTokensTo"`.
 */
export function useDepositPaymasterWithdrawTokensTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof depositPaymasterABI,
          'withdrawTokensTo'
        >['request']['abi'],
        'withdrawTokensTo',
        TMode
      > & { functionName?: 'withdrawTokensTo' }
    : UseContractWriteConfig<
        typeof depositPaymasterABI,
        'withdrawTokensTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawTokensTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof depositPaymasterABI,
    'withdrawTokensTo',
    TMode
  >({
    abi: depositPaymasterABI,
    functionName: 'withdrawTokensTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__.
 */
export function usePrepareDepositPaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addDepositFor"`.
 */
export function usePrepareDepositPaymasterAddDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'addDepositFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'addDepositFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'addDepositFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareDepositPaymasterAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"addToken"`.
 */
export function usePrepareDepositPaymasterAddToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'addToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'addToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'addToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareDepositPaymasterDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"lockTokenDeposit"`.
 */
export function usePrepareDepositPaymasterLockTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'lockTokenDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'lockTokenDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'lockTokenDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function usePrepareDepositPaymasterPostOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'postOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'postOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDepositPaymasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDepositPaymasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareDepositPaymasterUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"unlockTokenDeposit"`.
 */
export function usePrepareDepositPaymasterUnlockTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'unlockTokenDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'unlockTokenDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'unlockTokenDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function usePrepareDepositPaymasterValidatePaymasterUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'validatePaymasterUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'validatePaymasterUserOp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareDepositPaymasterWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'withdrawStake'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareDepositPaymasterWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof depositPaymasterABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link depositPaymasterABI}__ and `functionName` set to `"withdrawTokensTo"`.
 */
export function usePrepareDepositPaymasterWithdrawTokensTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof depositPaymasterABI,
      'withdrawTokensTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: depositPaymasterABI,
    functionName: 'withdrawTokensTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof depositPaymasterABI,
    'withdrawTokensTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link depositPaymasterABI}__.
 */
export function useDepositPaymasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof depositPaymasterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: depositPaymasterABI,
    ...config,
  } as UseContractEventConfig<typeof depositPaymasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link depositPaymasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDepositPaymasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof depositPaymasterABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: depositPaymasterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof depositPaymasterABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__.
 */
export function useErc1967ProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967ProxyAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967ProxyBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967ProxyUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__.
 */
export function useEntryPointRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"SIG_VALIDATION_FAILED"`.
 */
export function useEntryPointSigValidationFailed<
  TFunctionName extends 'SIG_VALIDATION_FAILED',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'SIG_VALIDATION_FAILED',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"_validateSenderAndPaymaster"`.
 */
export function useEntryPointValidateSenderAndPaymaster<
  TFunctionName extends '_validateSenderAndPaymaster',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: '_validateSenderAndPaymaster',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useEntryPointBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"deposits"`.
 */
export function useEntryPointDeposits<
  TFunctionName extends 'deposits',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'deposits',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"getDepositInfo"`.
 */
export function useEntryPointGetDepositInfo<
  TFunctionName extends 'getDepositInfo',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'getDepositInfo',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"getNonce"`.
 */
export function useEntryPointGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"getUserOpHash"`.
 */
export function useEntryPointGetUserOpHash<
  TFunctionName extends 'getUserOpHash',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'getUserOpHash',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"nonceSequenceNumber"`.
 */
export function useEntryPointNonceSequenceNumber<
  TFunctionName extends 'nonceSequenceNumber',
  TSelectData = ReadContractResult<typeof entryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: entryPointABI,
    functionName: 'nonceSequenceNumber',
    ...config,
  } as UseContractReadConfig<typeof entryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__.
 */
export function useEntryPointWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof entryPointABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, TFunctionName, TMode>({
    abi: entryPointABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function useEntryPointAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof entryPointABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'addStake', TMode>({
    abi: entryPointABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function useEntryPointDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'depositTo'
        >['request']['abi'],
        'depositTo',
        TMode
      > & { functionName?: 'depositTo' }
    : UseContractWriteConfig<typeof entryPointABI, 'depositTo', TMode> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'depositTo', TMode>({
    abi: entryPointABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function useEntryPointGetSenderAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'getSenderAddress'
        >['request']['abi'],
        'getSenderAddress',
        TMode
      > & { functionName?: 'getSenderAddress' }
    : UseContractWriteConfig<
        typeof entryPointABI,
        'getSenderAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'getSenderAddress'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'getSenderAddress', TMode>({
    abi: entryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function useEntryPointHandleAggregatedOps<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'handleAggregatedOps'
        >['request']['abi'],
        'handleAggregatedOps',
        TMode
      > & { functionName?: 'handleAggregatedOps' }
    : UseContractWriteConfig<
        typeof entryPointABI,
        'handleAggregatedOps',
        TMode
      > & {
        abi?: never
        functionName?: 'handleAggregatedOps'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'handleAggregatedOps', TMode>({
    abi: entryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function useEntryPointHandleOps<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'handleOps'
        >['request']['abi'],
        'handleOps',
        TMode
      > & { functionName?: 'handleOps' }
    : UseContractWriteConfig<typeof entryPointABI, 'handleOps', TMode> & {
        abi?: never
        functionName?: 'handleOps'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'handleOps', TMode>({
    abi: entryPointABI,
    functionName: 'handleOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useEntryPointIncrementNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'incrementNonce'
        >['request']['abi'],
        'incrementNonce',
        TMode
      > & { functionName?: 'incrementNonce' }
    : UseContractWriteConfig<typeof entryPointABI, 'incrementNonce', TMode> & {
        abi?: never
        functionName?: 'incrementNonce'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'incrementNonce', TMode>({
    abi: entryPointABI,
    functionName: 'incrementNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"innerHandleOp"`.
 */
export function useEntryPointInnerHandleOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'innerHandleOp'
        >['request']['abi'],
        'innerHandleOp',
        TMode
      > & { functionName?: 'innerHandleOp' }
    : UseContractWriteConfig<typeof entryPointABI, 'innerHandleOp', TMode> & {
        abi?: never
        functionName?: 'innerHandleOp'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'innerHandleOp', TMode>({
    abi: entryPointABI,
    functionName: 'innerHandleOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function useEntryPointSimulateHandleOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'simulateHandleOp'
        >['request']['abi'],
        'simulateHandleOp',
        TMode
      > & { functionName?: 'simulateHandleOp' }
    : UseContractWriteConfig<
        typeof entryPointABI,
        'simulateHandleOp',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateHandleOp'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'simulateHandleOp', TMode>({
    abi: entryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function useEntryPointSimulateValidation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'simulateValidation'
        >['request']['abi'],
        'simulateValidation',
        TMode
      > & { functionName?: 'simulateValidation' }
    : UseContractWriteConfig<
        typeof entryPointABI,
        'simulateValidation',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateValidation'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'simulateValidation', TMode>({
    abi: entryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useEntryPointUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof entryPointABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'unlockStake', TMode>({
    abi: entryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useEntryPointWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<typeof entryPointABI, 'withdrawStake', TMode> & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'withdrawStake', TMode>({
    abi: entryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useEntryPointWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof entryPointABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof entryPointABI, 'withdrawTo', TMode> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof entryPointABI, 'withdrawTo', TMode>({
    abi: entryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__.
 */
export function usePrepareEntryPointWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareEntryPointAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareEntryPointDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'depositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'depositTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'depositTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function usePrepareEntryPointGetSenderAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'getSenderAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'getSenderAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function usePrepareEntryPointHandleAggregatedOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'handleAggregatedOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof entryPointABI,
    'handleAggregatedOps'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function usePrepareEntryPointHandleOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'handleOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'handleOps',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'handleOps'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareEntryPointIncrementNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'incrementNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'incrementNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'incrementNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"innerHandleOp"`.
 */
export function usePrepareEntryPointInnerHandleOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'innerHandleOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'innerHandleOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'innerHandleOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function usePrepareEntryPointSimulateHandleOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'simulateHandleOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'simulateHandleOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function usePrepareEntryPointSimulateValidation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'simulateValidation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof entryPointABI,
    'simulateValidation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareEntryPointUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareEntryPointWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link entryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareEntryPointWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof entryPointABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: entryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof entryPointABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__.
 */
export function useEntryPointEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"AccountDeployed"`.
 */
export function useEntryPointAccountDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'AccountDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'AccountDeployed',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'AccountDeployed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"BeforeExecution"`.
 */
export function useEntryPointBeforeExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'BeforeExecution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'BeforeExecution',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'BeforeExecution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"Deposited"`.
 */
export function useEntryPointDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"SignatureAggregatorChanged"`.
 */
export function useEntryPointSignatureAggregatorChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'SignatureAggregatorChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'SignatureAggregatorChanged',
    ...config,
  } as UseContractEventConfig<
    typeof entryPointABI,
    'SignatureAggregatorChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useEntryPointStakeLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'StakeLocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'StakeLocked',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'StakeLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useEntryPointStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useEntryPointStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"UserOperationEvent"`.
 */
export function useEntryPointUserOperationEventEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'UserOperationEvent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'UserOperationEvent',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'UserOperationEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"UserOperationRevertReason"`.
 */
export function useEntryPointUserOperationRevertReasonEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'UserOperationRevertReason'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'UserOperationRevertReason',
    ...config,
  } as UseContractEventConfig<
    typeof entryPointABI,
    'UserOperationRevertReason'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link entryPointABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useEntryPointWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof entryPointABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: entryPointABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof entryPointABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountABI}__.
 */
export function useIAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccountABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAccountABI, TFunctionName, TMode>({
    abi: iAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useIAccountValidateUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccountABI,
          'validateUserOp'
        >['request']['abi'],
        'validateUserOp',
        TMode
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<typeof iAccountABI, 'validateUserOp', TMode> & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<typeof iAccountABI, 'validateUserOp', TMode>({
    abi: iAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountABI}__.
 */
export function usePrepareIAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareIAccountValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccountABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccountABI, 'validateUserOp'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAggregatorABI}__.
 */
export function useIAggregatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAggregatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAggregatorABI,
    ...config,
  } as UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAggregatorABI}__ and `functionName` set to `"aggregateSignatures"`.
 */
export function useIAggregatorAggregateSignatures<
  TFunctionName extends 'aggregateSignatures',
  TSelectData = ReadContractResult<typeof iAggregatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAggregatorABI,
    functionName: 'aggregateSignatures',
    ...config,
  } as UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAggregatorABI}__ and `functionName` set to `"validateSignatures"`.
 */
export function useIAggregatorValidateSignatures<
  TFunctionName extends 'validateSignatures',
  TSelectData = ReadContractResult<typeof iAggregatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAggregatorABI,
    functionName: 'validateSignatures',
    ...config,
  } as UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAggregatorABI}__ and `functionName` set to `"validateUserOpSignature"`.
 */
export function useIAggregatorValidateUserOpSignature<
  TFunctionName extends 'validateUserOpSignature',
  TSelectData = ReadContractResult<typeof iAggregatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAggregatorABI,
    functionName: 'validateUserOpSignature',
    ...config,
  } as UseContractReadConfig<typeof iAggregatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarExecutableABI}__.
 */
export function useIAxelarExecutableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAxelarExecutableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAxelarExecutableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarExecutableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarExecutableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarExecutableABI}__ and `functionName` set to `"gateway"`.
 */
export function useIAxelarExecutableGateway<
  TFunctionName extends 'gateway',
  TSelectData = ReadContractResult<typeof iAxelarExecutableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAxelarExecutableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarExecutableABI,
    functionName: 'gateway',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarExecutableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__.
 */
export function useIAxelarExecutableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarExecutableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iAxelarExecutableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarExecutableABI, TFunctionName, TMode>({
    abi: iAxelarExecutableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function useIAxelarExecutableExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarExecutableABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iAxelarExecutableABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarExecutableABI, 'execute', TMode>({
    abi: iAxelarExecutableABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function useIAxelarExecutableExecuteWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarExecutableABI,
          'executeWithToken'
        >['request']['abi'],
        'executeWithToken',
        TMode
      > & { functionName?: 'executeWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarExecutableABI,
        'executeWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'executeWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarExecutableABI,
    'executeWithToken',
    TMode
  >({
    abi: iAxelarExecutableABI,
    functionName: 'executeWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__.
 */
export function usePrepareIAxelarExecutableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarExecutableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarExecutableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarExecutableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIAxelarExecutableExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarExecutableABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarExecutableABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarExecutableABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarExecutableABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function usePrepareIAxelarExecutableExecuteWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarExecutableABI,
      'executeWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarExecutableABI,
    functionName: 'executeWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarExecutableABI,
    'executeWithToken'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__.
 */
export function useIAxelarGasServiceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, TFunctionName, TMode>({
    abi: iAxelarGasServiceABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addExpressGas"`.
 */
export function useIAxelarGasServiceAddExpressGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'addExpressGas'
        >['request']['abi'],
        'addExpressGas',
        TMode
      > & { functionName?: 'addExpressGas' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'addExpressGas',
        TMode
      > & {
        abi?: never
        functionName?: 'addExpressGas'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'addExpressGas', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'addExpressGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addGas"`.
 */
export function useIAxelarGasServiceAddGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'addGas'
        >['request']['abi'],
        'addGas',
        TMode
      > & { functionName?: 'addGas' }
    : UseContractWriteConfig<typeof iAxelarGasServiceABI, 'addGas', TMode> & {
        abi?: never
        functionName?: 'addGas'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'addGas', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'addGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addNativeExpressGas"`.
 */
export function useIAxelarGasServiceAddNativeExpressGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'addNativeExpressGas'
        >['request']['abi'],
        'addNativeExpressGas',
        TMode
      > & { functionName?: 'addNativeExpressGas' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'addNativeExpressGas',
        TMode
      > & {
        abi?: never
        functionName?: 'addNativeExpressGas'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'addNativeExpressGas',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'addNativeExpressGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addNativeGas"`.
 */
export function useIAxelarGasServiceAddNativeGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'addNativeGas'
        >['request']['abi'],
        'addNativeGas',
        TMode
      > & { functionName?: 'addNativeGas' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'addNativeGas',
        TMode
      > & {
        abi?: never
        functionName?: 'addNativeGas'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'addNativeGas', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'addNativeGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"collectFees"`.
 */
export function useIAxelarGasServiceCollectFees<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'collectFees'
        >['request']['abi'],
        'collectFees',
        TMode
      > & { functionName?: 'collectFees' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'collectFees',
        TMode
      > & {
        abi?: never
        functionName?: 'collectFees'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'collectFees', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'collectFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"gasCollector"`.
 */
export function useIAxelarGasServiceGasCollector<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'gasCollector'
        >['request']['abi'],
        'gasCollector',
        TMode
      > & { functionName?: 'gasCollector' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'gasCollector',
        TMode
      > & {
        abi?: never
        functionName?: 'gasCollector'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'gasCollector', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'gasCollector',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForContractCall"`.
 */
export function useIAxelarGasServicePayGasForContractCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payGasForContractCall'
        >['request']['abi'],
        'payGasForContractCall',
        TMode
      > & { functionName?: 'payGasForContractCall' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payGasForContractCall',
        TMode
      > & {
        abi?: never
        functionName?: 'payGasForContractCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payGasForContractCall',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForContractCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForContractCallWithToken"`.
 */
export function useIAxelarGasServicePayGasForContractCallWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payGasForContractCallWithToken'
        >['request']['abi'],
        'payGasForContractCallWithToken',
        TMode
      > & { functionName?: 'payGasForContractCallWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payGasForContractCallWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payGasForContractCallWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payGasForContractCallWithToken',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForContractCallWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForExpressCallWithToken"`.
 */
export function useIAxelarGasServicePayGasForExpressCallWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payGasForExpressCallWithToken'
        >['request']['abi'],
        'payGasForExpressCallWithToken',
        TMode
      > & { functionName?: 'payGasForExpressCallWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payGasForExpressCallWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payGasForExpressCallWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payGasForExpressCallWithToken',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForExpressCallWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForContractCall"`.
 */
export function useIAxelarGasServicePayNativeGasForContractCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payNativeGasForContractCall'
        >['request']['abi'],
        'payNativeGasForContractCall',
        TMode
      > & { functionName?: 'payNativeGasForContractCall' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payNativeGasForContractCall',
        TMode
      > & {
        abi?: never
        functionName?: 'payNativeGasForContractCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payNativeGasForContractCall',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForContractCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForContractCallWithToken"`.
 */
export function useIAxelarGasServicePayNativeGasForContractCallWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payNativeGasForContractCallWithToken'
        >['request']['abi'],
        'payNativeGasForContractCallWithToken',
        TMode
      > & { functionName?: 'payNativeGasForContractCallWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payNativeGasForContractCallWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payNativeGasForContractCallWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payNativeGasForContractCallWithToken',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForContractCallWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForExpressCallWithToken"`.
 */
export function useIAxelarGasServicePayNativeGasForExpressCallWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'payNativeGasForExpressCallWithToken'
        >['request']['abi'],
        'payNativeGasForExpressCallWithToken',
        TMode
      > & { functionName?: 'payNativeGasForExpressCallWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarGasServiceABI,
        'payNativeGasForExpressCallWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payNativeGasForExpressCallWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGasServiceABI,
    'payNativeGasForExpressCallWithToken',
    TMode
  >({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForExpressCallWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"refund"`.
 */
export function useIAxelarGasServiceRefund<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGasServiceABI,
          'refund'
        >['request']['abi'],
        'refund',
        TMode
      > & { functionName?: 'refund' }
    : UseContractWriteConfig<typeof iAxelarGasServiceABI, 'refund', TMode> & {
        abi?: never
        functionName?: 'refund'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGasServiceABI, 'refund', TMode>({
    abi: iAxelarGasServiceABI,
    functionName: 'refund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__.
 */
export function usePrepareIAxelarGasServiceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addExpressGas"`.
 */
export function usePrepareIAxelarGasServiceAddExpressGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'addExpressGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'addExpressGas',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'addExpressGas'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addGas"`.
 */
export function usePrepareIAxelarGasServiceAddGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'addGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'addGas',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'addGas'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addNativeExpressGas"`.
 */
export function usePrepareIAxelarGasServiceAddNativeExpressGas(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'addNativeExpressGas'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'addNativeExpressGas',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'addNativeExpressGas'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"addNativeGas"`.
 */
export function usePrepareIAxelarGasServiceAddNativeGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'addNativeGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'addNativeGas',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'addNativeGas'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"collectFees"`.
 */
export function usePrepareIAxelarGasServiceCollectFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'collectFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'collectFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'collectFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"gasCollector"`.
 */
export function usePrepareIAxelarGasServiceGasCollector(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'gasCollector'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'gasCollector',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'gasCollector'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForContractCall"`.
 */
export function usePrepareIAxelarGasServicePayGasForContractCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payGasForContractCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForContractCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payGasForContractCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForContractCallWithToken"`.
 */
export function usePrepareIAxelarGasServicePayGasForContractCallWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payGasForContractCallWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForContractCallWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payGasForContractCallWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payGasForExpressCallWithToken"`.
 */
export function usePrepareIAxelarGasServicePayGasForExpressCallWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payGasForExpressCallWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payGasForExpressCallWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payGasForExpressCallWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForContractCall"`.
 */
export function usePrepareIAxelarGasServicePayNativeGasForContractCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payNativeGasForContractCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForContractCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payNativeGasForContractCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForContractCallWithToken"`.
 */
export function usePrepareIAxelarGasServicePayNativeGasForContractCallWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payNativeGasForContractCallWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForContractCallWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payNativeGasForContractCallWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"payNativeGasForExpressCallWithToken"`.
 */
export function usePrepareIAxelarGasServicePayNativeGasForExpressCallWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGasServiceABI,
      'payNativeGasForExpressCallWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'payNativeGasForExpressCallWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGasServiceABI,
    'payNativeGasForExpressCallWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `functionName` set to `"refund"`.
 */
export function usePrepareIAxelarGasServiceRefund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'refund'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGasServiceABI,
    functionName: 'refund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGasServiceABI, 'refund'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__.
 */
export function useIAxelarGasServiceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGasServiceABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    ...config,
  } as UseContractEventConfig<typeof iAxelarGasServiceABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"ExpressGasAdded"`.
 */
export function useIAxelarGasServiceExpressGasAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGasServiceABI, 'ExpressGasAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'ExpressGasAdded',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGasServiceABI, 'ExpressGasAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"GasAdded"`.
 */
export function useIAxelarGasServiceGasAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGasServiceABI, 'GasAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'GasAdded',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGasServiceABI, 'GasAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"GasPaidForContractCall"`.
 */
export function useIAxelarGasServiceGasPaidForContractCallEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'GasPaidForContractCall'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'GasPaidForContractCall',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'GasPaidForContractCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"GasPaidForContractCallWithToken"`.
 */
export function useIAxelarGasServiceGasPaidForContractCallWithTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'GasPaidForContractCallWithToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'GasPaidForContractCallWithToken',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'GasPaidForContractCallWithToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"GasPaidForExpressCallWithToken"`.
 */
export function useIAxelarGasServiceGasPaidForExpressCallWithTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'GasPaidForExpressCallWithToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'GasPaidForExpressCallWithToken',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'GasPaidForExpressCallWithToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"NativeExpressGasAdded"`.
 */
export function useIAxelarGasServiceNativeExpressGasAddedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'NativeExpressGasAdded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'NativeExpressGasAdded',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'NativeExpressGasAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"NativeGasAdded"`.
 */
export function useIAxelarGasServiceNativeGasAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGasServiceABI, 'NativeGasAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'NativeGasAdded',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGasServiceABI, 'NativeGasAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"NativeGasPaidForContractCall"`.
 */
export function useIAxelarGasServiceNativeGasPaidForContractCallEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'NativeGasPaidForContractCall'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'NativeGasPaidForContractCall',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'NativeGasPaidForContractCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"NativeGasPaidForContractCallWithToken"`.
 */
export function useIAxelarGasServiceNativeGasPaidForContractCallWithTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'NativeGasPaidForContractCallWithToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'NativeGasPaidForContractCallWithToken',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'NativeGasPaidForContractCallWithToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGasServiceABI}__ and `eventName` set to `"NativeGasPaidForExpressCallWithToken"`.
 */
export function useIAxelarGasServiceNativeGasPaidForExpressCallWithTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGasServiceABI,
      'NativeGasPaidForExpressCallWithToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGasServiceABI,
    eventName: 'NativeGasPaidForExpressCallWithToken',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGasServiceABI,
    'NativeGasPaidForExpressCallWithToken'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__.
 */
export function useIAxelarGatewayRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"adminEpoch"`.
 */
export function useIAxelarGatewayAdminEpoch<
  TFunctionName extends 'adminEpoch',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'adminEpoch',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"adminThreshold"`.
 */
export function useIAxelarGatewayAdminThreshold<
  TFunctionName extends 'adminThreshold',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'adminThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"admins"`.
 */
export function useIAxelarGatewayAdmins<
  TFunctionName extends 'admins',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'admins',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"allTokensFrozen"`.
 */
export function useIAxelarGatewayAllTokensFrozen<
  TFunctionName extends 'allTokensFrozen',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'allTokensFrozen',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"authModule"`.
 */
export function useIAxelarGatewayAuthModule<
  TFunctionName extends 'authModule',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'authModule',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"implementation"`.
 */
export function useIAxelarGatewayImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"isCommandExecuted"`.
 */
export function useIAxelarGatewayIsCommandExecuted<
  TFunctionName extends 'isCommandExecuted',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'isCommandExecuted',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"isContractCallAndMintApproved"`.
 */
export function useIAxelarGatewayIsContractCallAndMintApproved<
  TFunctionName extends 'isContractCallAndMintApproved',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'isContractCallAndMintApproved',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"isContractCallApproved"`.
 */
export function useIAxelarGatewayIsContractCallApproved<
  TFunctionName extends 'isContractCallApproved',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'isContractCallApproved',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"tokenAddresses"`.
 */
export function useIAxelarGatewayTokenAddresses<
  TFunctionName extends 'tokenAddresses',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'tokenAddresses',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"tokenDeployer"`.
 */
export function useIAxelarGatewayTokenDeployer<
  TFunctionName extends 'tokenDeployer',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'tokenDeployer',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"tokenFrozen"`.
 */
export function useIAxelarGatewayTokenFrozen<
  TFunctionName extends 'tokenFrozen',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'tokenFrozen',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"tokenMintAmount"`.
 */
export function useIAxelarGatewayTokenMintAmount<
  TFunctionName extends 'tokenMintAmount',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'tokenMintAmount',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"tokenMintLimit"`.
 */
export function useIAxelarGatewayTokenMintLimit<
  TFunctionName extends 'tokenMintLimit',
  TSelectData = ReadContractResult<typeof iAxelarGatewayABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAxelarGatewayABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAxelarGatewayABI,
    functionName: 'tokenMintLimit',
    ...config,
  } as UseContractReadConfig<
    typeof iAxelarGatewayABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__.
 */
export function useIAxelarGatewayWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAxelarGatewayABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, TFunctionName, TMode>({
    abi: iAxelarGatewayABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"callContract"`.
 */
export function useIAxelarGatewayCallContract<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'callContract'
        >['request']['abi'],
        'callContract',
        TMode
      > & { functionName?: 'callContract' }
    : UseContractWriteConfig<
        typeof iAxelarGatewayABI,
        'callContract',
        TMode
      > & {
        abi?: never
        functionName?: 'callContract'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, 'callContract', TMode>({
    abi: iAxelarGatewayABI,
    functionName: 'callContract',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"callContractWithToken"`.
 */
export function useIAxelarGatewayCallContractWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'callContractWithToken'
        >['request']['abi'],
        'callContractWithToken',
        TMode
      > & { functionName?: 'callContractWithToken' }
    : UseContractWriteConfig<
        typeof iAxelarGatewayABI,
        'callContractWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'callContractWithToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGatewayABI,
    'callContractWithToken',
    TMode
  >({
    abi: iAxelarGatewayABI,
    functionName: 'callContractWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"execute"`.
 */
export function useIAxelarGatewayExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iAxelarGatewayABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, 'execute', TMode>({
    abi: iAxelarGatewayABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"sendToken"`.
 */
export function useIAxelarGatewaySendToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'sendToken'
        >['request']['abi'],
        'sendToken',
        TMode
      > & { functionName?: 'sendToken' }
    : UseContractWriteConfig<typeof iAxelarGatewayABI, 'sendToken', TMode> & {
        abi?: never
        functionName?: 'sendToken'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, 'sendToken', TMode>({
    abi: iAxelarGatewayABI,
    functionName: 'sendToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"setTokenMintLimits"`.
 */
export function useIAxelarGatewaySetTokenMintLimits<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'setTokenMintLimits'
        >['request']['abi'],
        'setTokenMintLimits',
        TMode
      > & { functionName?: 'setTokenMintLimits' }
    : UseContractWriteConfig<
        typeof iAxelarGatewayABI,
        'setTokenMintLimits',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenMintLimits'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGatewayABI,
    'setTokenMintLimits',
    TMode
  >({
    abi: iAxelarGatewayABI,
    functionName: 'setTokenMintLimits',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"setup"`.
 */
export function useIAxelarGatewaySetup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'setup'
        >['request']['abi'],
        'setup',
        TMode
      > & { functionName?: 'setup' }
    : UseContractWriteConfig<typeof iAxelarGatewayABI, 'setup', TMode> & {
        abi?: never
        functionName?: 'setup'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, 'setup', TMode>({
    abi: iAxelarGatewayABI,
    functionName: 'setup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"upgrade"`.
 */
export function useIAxelarGatewayUpgrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof iAxelarGatewayABI, 'upgrade', TMode> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iAxelarGatewayABI, 'upgrade', TMode>({
    abi: iAxelarGatewayABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"validateContractCall"`.
 */
export function useIAxelarGatewayValidateContractCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'validateContractCall'
        >['request']['abi'],
        'validateContractCall',
        TMode
      > & { functionName?: 'validateContractCall' }
    : UseContractWriteConfig<
        typeof iAxelarGatewayABI,
        'validateContractCall',
        TMode
      > & {
        abi?: never
        functionName?: 'validateContractCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGatewayABI,
    'validateContractCall',
    TMode
  >({
    abi: iAxelarGatewayABI,
    functionName: 'validateContractCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"validateContractCallAndMint"`.
 */
export function useIAxelarGatewayValidateContractCallAndMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAxelarGatewayABI,
          'validateContractCallAndMint'
        >['request']['abi'],
        'validateContractCallAndMint',
        TMode
      > & { functionName?: 'validateContractCallAndMint' }
    : UseContractWriteConfig<
        typeof iAxelarGatewayABI,
        'validateContractCallAndMint',
        TMode
      > & {
        abi?: never
        functionName?: 'validateContractCallAndMint'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAxelarGatewayABI,
    'validateContractCallAndMint',
    TMode
  >({
    abi: iAxelarGatewayABI,
    functionName: 'validateContractCallAndMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__.
 */
export function usePrepareIAxelarGatewayWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"callContract"`.
 */
export function usePrepareIAxelarGatewayCallContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'callContract'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'callContract',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'callContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"callContractWithToken"`.
 */
export function usePrepareIAxelarGatewayCallContractWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGatewayABI,
      'callContractWithToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'callContractWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGatewayABI,
    'callContractWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIAxelarGatewayExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"sendToken"`.
 */
export function usePrepareIAxelarGatewaySendToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'sendToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'sendToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'sendToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"setTokenMintLimits"`.
 */
export function usePrepareIAxelarGatewaySetTokenMintLimits(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGatewayABI,
      'setTokenMintLimits'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'setTokenMintLimits',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGatewayABI,
    'setTokenMintLimits'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"setup"`.
 */
export function usePrepareIAxelarGatewaySetup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'setup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'setup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'setup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareIAxelarGatewayUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAxelarGatewayABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"validateContractCall"`.
 */
export function usePrepareIAxelarGatewayValidateContractCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGatewayABI,
      'validateContractCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'validateContractCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGatewayABI,
    'validateContractCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `functionName` set to `"validateContractCallAndMint"`.
 */
export function usePrepareIAxelarGatewayValidateContractCallAndMint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAxelarGatewayABI,
      'validateContractCallAndMint'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAxelarGatewayABI,
    functionName: 'validateContractCallAndMint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAxelarGatewayABI,
    'validateContractCallAndMint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__.
 */
export function useIAxelarGatewayEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"ContractCall"`.
 */
export function useIAxelarGatewayContractCallEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'ContractCall'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'ContractCall',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'ContractCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"ContractCallApproved"`.
 */
export function useIAxelarGatewayContractCallApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'ContractCallApproved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'ContractCallApproved',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'ContractCallApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"ContractCallApprovedWithMint"`.
 */
export function useIAxelarGatewayContractCallApprovedWithMintEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAxelarGatewayABI,
      'ContractCallApprovedWithMint'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'ContractCallApprovedWithMint',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGatewayABI,
    'ContractCallApprovedWithMint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"ContractCallWithToken"`.
 */
export function useIAxelarGatewayContractCallWithTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'ContractCallWithToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'ContractCallWithToken',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGatewayABI,
    'ContractCallWithToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"Executed"`.
 */
export function useIAxelarGatewayExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"OperatorshipTransferred"`.
 */
export function useIAxelarGatewayOperatorshipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'OperatorshipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'OperatorshipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGatewayABI,
    'OperatorshipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"TokenDeployed"`.
 */
export function useIAxelarGatewayTokenDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'TokenDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'TokenDeployed',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'TokenDeployed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"TokenMintLimitUpdated"`.
 */
export function useIAxelarGatewayTokenMintLimitUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'TokenMintLimitUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'TokenMintLimitUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iAxelarGatewayABI,
    'TokenMintLimitUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"TokenSent"`.
 */
export function useIAxelarGatewayTokenSentEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'TokenSent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'TokenSent',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'TokenSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAxelarGatewayABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIAxelarGatewayUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAxelarGatewayABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAxelarGatewayABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof iAxelarGatewayABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc1155ReceiverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverABI, TFunctionName, TMode>({
    abi: ierc1155ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        typeof ierc1155ReceiverABI,
        'onERC1155BatchReceived',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived',
    TMode
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        typeof ierc1155ReceiverABI,
        'onERC1155Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc1155ReceiverABI,
    'onERC1155Received',
    TMode
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967AdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967BeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({
    abi: ierc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'permit', TMode>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIEntryPointBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getDepositInfo"`.
 */
export function useIEntryPointGetDepositInfo<
  TFunctionName extends 'getDepositInfo',
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'getDepositInfo',
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getNonce"`.
 */
export function useIEntryPointGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getUserOpHash"`.
 */
export function useIEntryPointGetUserOpHash<
  TFunctionName extends 'getUserOpHash',
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'getUserOpHash',
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iEntryPointABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, TFunctionName, TMode>({
    abi: iEntryPointABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function useIEntryPointAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'addStake', TMode>({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function useIEntryPointDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'depositTo'
        >['request']['abi'],
        'depositTo',
        TMode
      > & { functionName?: 'depositTo' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'depositTo', TMode> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'depositTo', TMode>({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function useIEntryPointGetSenderAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'getSenderAddress'
        >['request']['abi'],
        'getSenderAddress',
        TMode
      > & { functionName?: 'getSenderAddress' }
    : UseContractWriteConfig<
        typeof iEntryPointABI,
        'getSenderAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'getSenderAddress'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'getSenderAddress', TMode>({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function useIEntryPointHandleAggregatedOps<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'handleAggregatedOps'
        >['request']['abi'],
        'handleAggregatedOps',
        TMode
      > & { functionName?: 'handleAggregatedOps' }
    : UseContractWriteConfig<
        typeof iEntryPointABI,
        'handleAggregatedOps',
        TMode
      > & {
        abi?: never
        functionName?: 'handleAggregatedOps'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'handleAggregatedOps', TMode>({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function useIEntryPointHandleOps<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'handleOps'
        >['request']['abi'],
        'handleOps',
        TMode
      > & { functionName?: 'handleOps' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'handleOps', TMode> & {
        abi?: never
        functionName?: 'handleOps'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'handleOps', TMode>({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useIEntryPointIncrementNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'incrementNonce'
        >['request']['abi'],
        'incrementNonce',
        TMode
      > & { functionName?: 'incrementNonce' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'incrementNonce', TMode> & {
        abi?: never
        functionName?: 'incrementNonce'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'incrementNonce', TMode>({
    abi: iEntryPointABI,
    functionName: 'incrementNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function useIEntryPointSimulateHandleOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'simulateHandleOp'
        >['request']['abi'],
        'simulateHandleOp',
        TMode
      > & { functionName?: 'simulateHandleOp' }
    : UseContractWriteConfig<
        typeof iEntryPointABI,
        'simulateHandleOp',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateHandleOp'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'simulateHandleOp', TMode>({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function useIEntryPointSimulateValidation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'simulateValidation'
        >['request']['abi'],
        'simulateValidation',
        TMode
      > & { functionName?: 'simulateValidation' }
    : UseContractWriteConfig<
        typeof iEntryPointABI,
        'simulateValidation',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateValidation'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'simulateValidation', TMode>({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIEntryPointUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'unlockStake', TMode>({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIEntryPointWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'withdrawStake', TMode> & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'withdrawStake', TMode>({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIEntryPointWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof iEntryPointABI, 'withdrawTo', TMode> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof iEntryPointABI, 'withdrawTo', TMode>({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function usePrepareIEntryPointWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareIEntryPointAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareIEntryPointDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'depositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'depositTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function usePrepareIEntryPointGetSenderAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'getSenderAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'getSenderAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function usePrepareIEntryPointHandleAggregatedOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleAggregatedOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iEntryPointABI,
    'handleAggregatedOps'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function usePrepareIEntryPointHandleOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleOps'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareIEntryPointIncrementNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'incrementNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'incrementNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'incrementNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function usePrepareIEntryPointSimulateHandleOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateHandleOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateHandleOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function usePrepareIEntryPointSimulateValidation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateValidation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iEntryPointABI,
    'simulateValidation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIEntryPointUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIEntryPointWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIEntryPointWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"AccountDeployed"`.
 */
export function useIEntryPointAccountDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'AccountDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'AccountDeployed',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'AccountDeployed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"BeforeExecution"`.
 */
export function useIEntryPointBeforeExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'BeforeExecution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'BeforeExecution',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'BeforeExecution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIEntryPointDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"SignatureAggregatorChanged"`.
 */
export function useIEntryPointSignatureAggregatorChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'SignatureAggregatorChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'SignatureAggregatorChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iEntryPointABI,
    'SignatureAggregatorChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useIEntryPointStakeLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeLocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeLocked',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIEntryPointStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIEntryPointStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationEvent"`.
 */
export function useIEntryPointUserOperationEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'UserOperationEvent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationEvent',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'UserOperationEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationRevertReason"`.
 */
export function useIEntryPointUserOperationRevertReasonEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'UserOperationRevertReason'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationRevertReason',
    ...config,
  } as UseContractEventConfig<
    typeof iEntryPointABI,
    'UserOperationRevertReason'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIEntryPointWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function useINonceManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iNonceManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iNonceManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iNonceManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof iNonceManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNonceManagerABI}__ and `functionName` set to `"getNonce"`.
 */
export function useINonceManagerGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof iNonceManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iNonceManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iNonceManagerABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<
    typeof iNonceManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function useINonceManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iNonceManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iNonceManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iNonceManagerABI, TFunctionName, TMode>({
    abi: iNonceManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useINonceManagerIncrementNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iNonceManagerABI,
          'incrementNonce'
        >['request']['abi'],
        'incrementNonce',
        TMode
      > & { functionName?: 'incrementNonce' }
    : UseContractWriteConfig<
        typeof iNonceManagerABI,
        'incrementNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'incrementNonce'
      } = {} as any,
) {
  return useContractWrite<typeof iNonceManagerABI, 'incrementNonce', TMode>({
    abi: iNonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function usePrepareINonceManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iNonceManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iNonceManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iNonceManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareINonceManagerIncrementNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iNonceManagerABI, 'incrementNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iNonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iNonceManagerABI, 'incrementNonce'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777RecipientABI}__.
 */
export function useIerc777RecipientWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777RecipientABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc777RecipientABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc777RecipientABI, TFunctionName, TMode>({
    abi: ierc777RecipientABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777RecipientABI}__ and `functionName` set to `"tokensReceived"`.
 */
export function useIerc777RecipientTokensReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777RecipientABI,
          'tokensReceived'
        >['request']['abi'],
        'tokensReceived',
        TMode
      > & { functionName?: 'tokensReceived' }
    : UseContractWriteConfig<
        typeof ierc777RecipientABI,
        'tokensReceived',
        TMode
      > & {
        abi?: never
        functionName?: 'tokensReceived'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777RecipientABI, 'tokensReceived', TMode>({
    abi: ierc777RecipientABI,
    functionName: 'tokensReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777RecipientABI}__.
 */
export function usePrepareIerc777RecipientWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777RecipientABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777RecipientABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777RecipientABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777RecipientABI}__ and `functionName` set to `"tokensReceived"`.
 */
export function usePrepareIerc777RecipientTokensReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777RecipientABI, 'tokensReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777RecipientABI,
    functionName: 'tokensReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc777RecipientABI,
    'tokensReceived'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, TFunctionName, TMode>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, 'onERC721Received', TMode>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOracleABI}__.
 */
export function useIOracleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iOracleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOracleABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iOracleABI,
    ...config,
  } as UseContractReadConfig<typeof iOracleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOracleABI}__ and `functionName` set to `"getTokenValueOfEth"`.
 */
export function useIOracleGetTokenValueOfEth<
  TFunctionName extends 'getTokenValueOfEth',
  TSelectData = ReadContractResult<typeof iOracleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOracleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOracleABI,
    functionName: 'getTokenValueOfEth',
    ...config,
  } as UseContractReadConfig<typeof iOracleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIStakeManagerBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getDepositInfo"`.
 */
export function useIStakeManagerGetDepositInfo<
  TFunctionName extends 'getDepositInfo',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getDepositInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iStakeManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, TFunctionName, TMode>({
    abi: iStakeManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function useIStakeManagerAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof iStakeManagerABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'addStake', TMode>({
    abi: iStakeManagerABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function useIStakeManagerDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'depositTo'
        >['request']['abi'],
        'depositTo',
        TMode
      > & { functionName?: 'depositTo' }
    : UseContractWriteConfig<typeof iStakeManagerABI, 'depositTo', TMode> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'depositTo', TMode>({
    abi: iStakeManagerABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIStakeManagerUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof iStakeManagerABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'unlockStake', TMode>({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIStakeManagerWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'withdrawStake',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'withdrawStake', TMode>({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIStakeManagerWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof iStakeManagerABI, 'withdrawTo', TMode> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'withdrawTo', TMode>({
    abi: iStakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function usePrepareIStakeManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareIStakeManagerAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareIStakeManagerDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'depositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'depositTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'depositTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIStakeManagerUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIStakeManagerWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIStakeManagerWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIStakeManagerDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useIStakeManagerStakeLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeLocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeLocked',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIStakeManagerStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIStakeManagerStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIStakeManagerWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__.
 */
export function useIPaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPaymasterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPaymasterABI, TFunctionName, TMode>({
    abi: iPaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function useIPaymasterPostOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          'postOp'
        >['request']['abi'],
        'postOp',
        TMode
      > & { functionName?: 'postOp' }
    : UseContractWriteConfig<typeof iPaymasterABI, 'postOp', TMode> & {
        abi?: never
        functionName?: 'postOp'
      } = {} as any,
) {
  return useContractWrite<typeof iPaymasterABI, 'postOp', TMode>({
    abi: iPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function useIPaymasterValidatePaymasterUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          'validatePaymasterUserOp'
        >['request']['abi'],
        'validatePaymasterUserOp',
        TMode
      > & { functionName?: 'validatePaymasterUserOp' }
    : UseContractWriteConfig<
        typeof iPaymasterABI,
        'validatePaymasterUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validatePaymasterUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof iPaymasterABI,
    'validatePaymasterUserOp',
    TMode
  >({
    abi: iPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__.
 */
export function usePrepareIPaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function usePrepareIPaymasterPostOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPaymasterABI, 'postOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPaymasterABI, 'postOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function usePrepareIPaymasterValidatePaymasterUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPaymasterABI,
      'validatePaymasterUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPaymasterABI,
    'validatePaymasterUserOp'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__.
 */
export function useInterChainPaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"COST_OF_POST"`.
 */
export function useInterChainPaymasterCostOfPost<
  TFunctionName extends 'COST_OF_POST',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'COST_OF_POST',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"balances"`.
 */
export function useInterChainPaymasterBalances<
  TFunctionName extends 'balances',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'balances',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"depositInfo"`.
 */
export function useInterChainPaymasterDepositInfo<
  TFunctionName extends 'depositInfo',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'depositInfo',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useInterChainPaymasterEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"getDeposit"`.
 */
export function useInterChainPaymasterGetDeposit<
  TFunctionName extends 'getDeposit',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'getDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"oracles"`.
 */
export function useInterChainPaymasterOracles<
  TFunctionName extends 'oracles',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'oracles',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"owner"`.
 */
export function useInterChainPaymasterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"unlockBlock"`.
 */
export function useInterChainPaymasterUnlockBlock<
  TFunctionName extends 'unlockBlock',
  TSelectData = ReadContractResult<
    typeof interChainPaymasterABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof interChainPaymasterABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: interChainPaymasterABI,
    functionName: 'unlockBlock',
    ...config,
  } as UseContractReadConfig<
    typeof interChainPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__.
 */
export function useInterChainPaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, TFunctionName, TMode>({
    abi: interChainPaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addDepositFor"`.
 */
export function useInterChainPaymasterAddDepositFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'addDepositFor'
        >['request']['abi'],
        'addDepositFor',
        TMode
      > & { functionName?: 'addDepositFor' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'addDepositFor',
        TMode
      > & {
        abi?: never
        functionName?: 'addDepositFor'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'addDepositFor',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'addDepositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function useInterChainPaymasterAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'addStake',
        TMode
      > & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'addStake', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addToken"`.
 */
export function useInterChainPaymasterAddToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'addToken'
        >['request']['abi'],
        'addToken',
        TMode
      > & { functionName?: 'addToken' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'addToken',
        TMode
      > & {
        abi?: never
        functionName?: 'addToken'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'addToken', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'addToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function useInterChainPaymasterDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'deposit',
        TMode
      > & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'deposit', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"frontRunUserOp"`.
 */
export function useInterChainPaymasterFrontRunUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'frontRunUserOp'
        >['request']['abi'],
        'frontRunUserOp',
        TMode
      > & { functionName?: 'frontRunUserOp' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'frontRunUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'frontRunUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'frontRunUserOp',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'frontRunUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"lockTokenDeposit"`.
 */
export function useInterChainPaymasterLockTokenDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'lockTokenDeposit'
        >['request']['abi'],
        'lockTokenDeposit',
        TMode
      > & { functionName?: 'lockTokenDeposit' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'lockTokenDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'lockTokenDeposit'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'lockTokenDeposit',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'lockTokenDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function useInterChainPaymasterPostOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'postOp'
        >['request']['abi'],
        'postOp',
        TMode
      > & { functionName?: 'postOp' }
    : UseContractWriteConfig<typeof interChainPaymasterABI, 'postOp', TMode> & {
        abi?: never
        functionName?: 'postOp'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'postOp', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useInterChainPaymasterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'renounceOwnership',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"simulateFrontRun"`.
 */
export function useInterChainPaymasterSimulateFrontRun<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'simulateFrontRun'
        >['request']['abi'],
        'simulateFrontRun',
        TMode
      > & { functionName?: 'simulateFrontRun' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'simulateFrontRun',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateFrontRun'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'simulateFrontRun',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'simulateFrontRun',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useInterChainPaymasterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'transferOwnership',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useInterChainPaymasterUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'unlockStake',
        TMode
      > & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'unlockStake', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"unlockTokenDeposit"`.
 */
export function useInterChainPaymasterUnlockTokenDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'unlockTokenDeposit'
        >['request']['abi'],
        'unlockTokenDeposit',
        TMode
      > & { functionName?: 'unlockTokenDeposit' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'unlockTokenDeposit',
        TMode
      > & {
        abi?: never
        functionName?: 'unlockTokenDeposit'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'unlockTokenDeposit',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'unlockTokenDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function useInterChainPaymasterValidatePaymasterUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'validatePaymasterUserOp'
        >['request']['abi'],
        'validatePaymasterUserOp',
        TMode
      > & { functionName?: 'validatePaymasterUserOp' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'validatePaymasterUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validatePaymasterUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'validatePaymasterUserOp',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useInterChainPaymasterWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'withdrawStake',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'withdrawStake',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useInterChainPaymasterWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'withdrawTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof interChainPaymasterABI, 'withdrawTo', TMode>({
    abi: interChainPaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawTokensTo"`.
 */
export function useInterChainPaymasterWithdrawTokensTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof interChainPaymasterABI,
          'withdrawTokensTo'
        >['request']['abi'],
        'withdrawTokensTo',
        TMode
      > & { functionName?: 'withdrawTokensTo' }
    : UseContractWriteConfig<
        typeof interChainPaymasterABI,
        'withdrawTokensTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawTokensTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof interChainPaymasterABI,
    'withdrawTokensTo',
    TMode
  >({
    abi: interChainPaymasterABI,
    functionName: 'withdrawTokensTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__.
 */
export function usePrepareInterChainPaymasterWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addDepositFor"`.
 */
export function usePrepareInterChainPaymasterAddDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'addDepositFor'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'addDepositFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'addDepositFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareInterChainPaymasterAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"addToken"`.
 */
export function usePrepareInterChainPaymasterAddToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'addToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'addToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'addToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareInterChainPaymasterDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"frontRunUserOp"`.
 */
export function usePrepareInterChainPaymasterFrontRunUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'frontRunUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'frontRunUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'frontRunUserOp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"lockTokenDeposit"`.
 */
export function usePrepareInterChainPaymasterLockTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'lockTokenDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'lockTokenDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'lockTokenDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"postOp"`.
 */
export function usePrepareInterChainPaymasterPostOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'postOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'postOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'postOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareInterChainPaymasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"simulateFrontRun"`.
 */
export function usePrepareInterChainPaymasterSimulateFrontRun(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'simulateFrontRun'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'simulateFrontRun',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'simulateFrontRun'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareInterChainPaymasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareInterChainPaymasterUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'unlockStake'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"unlockTokenDeposit"`.
 */
export function usePrepareInterChainPaymasterUnlockTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'unlockTokenDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'unlockTokenDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'unlockTokenDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"validatePaymasterUserOp"`.
 */
export function usePrepareInterChainPaymasterValidatePaymasterUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'validatePaymasterUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'validatePaymasterUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'validatePaymasterUserOp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareInterChainPaymasterWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'withdrawStake'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'withdrawStake'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareInterChainPaymasterWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof interChainPaymasterABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'withdrawTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link interChainPaymasterABI}__ and `functionName` set to `"withdrawTokensTo"`.
 */
export function usePrepareInterChainPaymasterWithdrawTokensTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof interChainPaymasterABI,
      'withdrawTokensTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: interChainPaymasterABI,
    functionName: 'withdrawTokensTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof interChainPaymasterABI,
    'withdrawTokensTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interChainPaymasterABI}__.
 */
export function useInterChainPaymasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof interChainPaymasterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: interChainPaymasterABI,
    ...config,
  } as UseContractEventConfig<typeof interChainPaymasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link interChainPaymasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useInterChainPaymasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof interChainPaymasterABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: interChainPaymasterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof interChainPaymasterABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonceManagerABI}__.
 */
export function useNonceManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nonceManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nonceManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: nonceManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof nonceManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonceManagerABI}__ and `functionName` set to `"getNonce"`.
 */
export function useNonceManagerGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof nonceManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nonceManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonceManagerABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<
    typeof nonceManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonceManagerABI}__ and `functionName` set to `"nonceSequenceNumber"`.
 */
export function useNonceManagerNonceSequenceNumber<
  TFunctionName extends 'nonceSequenceNumber',
  TSelectData = ReadContractResult<typeof nonceManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nonceManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonceManagerABI,
    functionName: 'nonceSequenceNumber',
    ...config,
  } as UseContractReadConfig<
    typeof nonceManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonceManagerABI}__.
 */
export function useNonceManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonceManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof nonceManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof nonceManagerABI, TFunctionName, TMode>({
    abi: nonceManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useNonceManagerIncrementNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonceManagerABI,
          'incrementNonce'
        >['request']['abi'],
        'incrementNonce',
        TMode
      > & { functionName?: 'incrementNonce' }
    : UseContractWriteConfig<
        typeof nonceManagerABI,
        'incrementNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'incrementNonce'
      } = {} as any,
) {
  return useContractWrite<typeof nonceManagerABI, 'incrementNonce', TMode>({
    abi: nonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonceManagerABI}__.
 */
export function usePrepareNonceManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonceManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonceManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonceManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareNonceManagerIncrementNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonceManagerABI, 'incrementNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonceManagerABI, 'incrementNonce'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__.
 */
export function useReceiverAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useReceiverAccountEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"getDeposit"`.
 */
export function useReceiverAccountGetDeposit<
  TFunctionName extends 'getDeposit',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'getDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"getNonce"`.
 */
export function useReceiverAccountGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useReceiverAccountOnErc1155BatchReceived<
  TFunctionName extends 'onERC1155BatchReceived',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useReceiverAccountOnErc1155Received<
  TFunctionName extends 'onERC1155Received',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useReceiverAccountOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"owner"`.
 */
export function useReceiverAccountOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useReceiverAccountProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useReceiverAccountSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"tokensReceived"`.
 */
export function useReceiverAccountTokensReceived<
  TFunctionName extends 'tokensReceived',
  TSelectData = ReadContractResult<typeof receiverAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountABI,
    functionName: 'tokensReceived',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__.
 */
export function useReceiverAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof receiverAccountABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, TFunctionName, TMode>({
    abi: receiverAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"addDeposit"`.
 */
export function useReceiverAccountAddDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'addDeposit'
        >['request']['abi'],
        'addDeposit',
        TMode
      > & { functionName?: 'addDeposit' }
    : UseContractWriteConfig<typeof receiverAccountABI, 'addDeposit', TMode> & {
        abi?: never
        functionName?: 'addDeposit'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'addDeposit', TMode>({
    abi: receiverAccountABI,
    functionName: 'addDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"execute"`.
 */
export function useReceiverAccountExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof receiverAccountABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'execute', TMode>({
    abi: receiverAccountABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"executeBatch"`.
 */
export function useReceiverAccountExecuteBatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'executeBatch'
        >['request']['abi'],
        'executeBatch',
        TMode
      > & { functionName?: 'executeBatch' }
    : UseContractWriteConfig<
        typeof receiverAccountABI,
        'executeBatch',
        TMode
      > & {
        abi?: never
        functionName?: 'executeBatch'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'executeBatch', TMode>({
    abi: receiverAccountABI,
    functionName: 'executeBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function useReceiverAccountInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof receiverAccountABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'initialize', TMode>({
    abi: receiverAccountABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useReceiverAccountUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof receiverAccountABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'upgradeTo', TMode>({
    abi: receiverAccountABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useReceiverAccountUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof receiverAccountABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'upgradeToAndCall', TMode>(
    {
      abi: receiverAccountABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useReceiverAccountValidateUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'validateUserOp'
        >['request']['abi'],
        'validateUserOp',
        TMode
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<
        typeof receiverAccountABI,
        'validateUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<typeof receiverAccountABI, 'validateUserOp', TMode>({
    abi: receiverAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"withdrawDepositTo"`.
 */
export function useReceiverAccountWithdrawDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountABI,
          'withdrawDepositTo'
        >['request']['abi'],
        'withdrawDepositTo',
        TMode
      > & { functionName?: 'withdrawDepositTo' }
    : UseContractWriteConfig<
        typeof receiverAccountABI,
        'withdrawDepositTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawDepositTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof receiverAccountABI,
    'withdrawDepositTo',
    TMode
  >({
    abi: receiverAccountABI,
    functionName: 'withdrawDepositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__.
 */
export function usePrepareReceiverAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"addDeposit"`.
 */
export function usePrepareReceiverAccountAddDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'addDeposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'addDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, 'addDeposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareReceiverAccountExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"executeBatch"`.
 */
export function usePrepareReceiverAccountExecuteBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'executeBatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'executeBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, 'executeBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareReceiverAccountInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareReceiverAccountUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof receiverAccountABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareReceiverAccountUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof receiverAccountABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof receiverAccountABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareReceiverAccountValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof receiverAccountABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof receiverAccountABI,
    'validateUserOp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountABI}__ and `functionName` set to `"withdrawDepositTo"`.
 */
export function usePrepareReceiverAccountWithdrawDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof receiverAccountABI,
      'withdrawDepositTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountABI,
    functionName: 'withdrawDepositTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof receiverAccountABI,
    'withdrawDepositTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__.
 */
export function useReceiverAccountEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof receiverAccountABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    ...config,
  } as UseContractEventConfig<typeof receiverAccountABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useReceiverAccountAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof receiverAccountABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof receiverAccountABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useReceiverAccountBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof receiverAccountABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof receiverAccountABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReceiverAccountInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof receiverAccountABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof receiverAccountABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__ and `eventName` set to `"SimpleAccountInitialized"`.
 */
export function useReceiverAccountSimpleAccountInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof receiverAccountABI,
      'SimpleAccountInitialized'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    eventName: 'SimpleAccountInitialized',
    ...config,
  } as UseContractEventConfig<
    typeof receiverAccountABI,
    'SimpleAccountInitialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link receiverAccountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useReceiverAccountUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof receiverAccountABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: receiverAccountABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof receiverAccountABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountFactoryABI}__.
 */
export function useReceiverAccountFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof receiverAccountFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountFactoryABI}__ and `functionName` set to `"accountImplementation"`.
 */
export function useReceiverAccountFactoryAccountImplementation<
  TFunctionName extends 'accountImplementation',
  TSelectData = ReadContractResult<
    typeof receiverAccountFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountFactoryABI,
    functionName: 'accountImplementation',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link receiverAccountFactoryABI}__ and `functionName` set to `"getAddress"`.
 */
export function useReceiverAccountFactoryGetAddress<
  TFunctionName extends 'getAddress',
  TSelectData = ReadContractResult<
    typeof receiverAccountFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof receiverAccountFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: receiverAccountFactoryABI,
    functionName: 'getAddress',
    ...config,
  } as UseContractReadConfig<
    typeof receiverAccountFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountFactoryABI}__.
 */
export function useReceiverAccountFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof receiverAccountFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof receiverAccountFactoryABI,
    TFunctionName,
    TMode
  >({ abi: receiverAccountFactoryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link receiverAccountFactoryABI}__ and `functionName` set to `"createAccount"`.
 */
export function useReceiverAccountFactoryCreateAccount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof receiverAccountFactoryABI,
          'createAccount'
        >['request']['abi'],
        'createAccount',
        TMode
      > & { functionName?: 'createAccount' }
    : UseContractWriteConfig<
        typeof receiverAccountFactoryABI,
        'createAccount',
        TMode
      > & {
        abi?: never
        functionName?: 'createAccount'
      } = {} as any,
) {
  return useContractWrite<
    typeof receiverAccountFactoryABI,
    'createAccount',
    TMode
  >({
    abi: receiverAccountFactoryABI,
    functionName: 'createAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountFactoryABI}__.
 */
export function usePrepareReceiverAccountFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof receiverAccountFactoryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof receiverAccountFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link receiverAccountFactoryABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareReceiverAccountFactoryCreateAccount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof receiverAccountFactoryABI,
      'createAccount'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: receiverAccountFactoryABI,
    functionName: 'createAccount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof receiverAccountFactoryABI,
    'createAccount'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link senderCreatorABI}__.
 */
export function useSenderCreatorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof senderCreatorABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof senderCreatorABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof senderCreatorABI, TFunctionName, TMode>({
    abi: senderCreatorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link senderCreatorABI}__ and `functionName` set to `"createSender"`.
 */
export function useSenderCreatorCreateSender<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof senderCreatorABI,
          'createSender'
        >['request']['abi'],
        'createSender',
        TMode
      > & { functionName?: 'createSender' }
    : UseContractWriteConfig<typeof senderCreatorABI, 'createSender', TMode> & {
        abi?: never
        functionName?: 'createSender'
      } = {} as any,
) {
  return useContractWrite<typeof senderCreatorABI, 'createSender', TMode>({
    abi: senderCreatorABI,
    functionName: 'createSender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link senderCreatorABI}__.
 */
export function usePrepareSenderCreatorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof senderCreatorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: senderCreatorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof senderCreatorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link senderCreatorABI}__ and `functionName` set to `"createSender"`.
 */
export function usePrepareSenderCreatorCreateSender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof senderCreatorABI, 'createSender'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: senderCreatorABI,
    functionName: 'createSender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof senderCreatorABI, 'createSender'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__.
 */
export function useSimpleAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useSimpleAccountEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"getDeposit"`.
 */
export function useSimpleAccountGetDeposit<
  TFunctionName extends 'getDeposit',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'getDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"getNonce"`.
 */
export function useSimpleAccountGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useSimpleAccountOnErc1155BatchReceived<
  TFunctionName extends 'onERC1155BatchReceived',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useSimpleAccountOnErc1155Received<
  TFunctionName extends 'onERC1155Received',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useSimpleAccountOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"owner"`.
 */
export function useSimpleAccountOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSimpleAccountProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSimpleAccountSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"tokensReceived"`.
 */
export function useSimpleAccountTokensReceived<
  TFunctionName extends 'tokensReceived',
  TSelectData = ReadContractResult<typeof simpleAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof simpleAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: simpleAccountABI,
    functionName: 'tokensReceived',
    ...config,
  } as UseContractReadConfig<
    typeof simpleAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__.
 */
export function useSimpleAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof simpleAccountABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, TFunctionName, TMode>({
    abi: simpleAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"addDeposit"`.
 */
export function useSimpleAccountAddDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'addDeposit'
        >['request']['abi'],
        'addDeposit',
        TMode
      > & { functionName?: 'addDeposit' }
    : UseContractWriteConfig<typeof simpleAccountABI, 'addDeposit', TMode> & {
        abi?: never
        functionName?: 'addDeposit'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'addDeposit', TMode>({
    abi: simpleAccountABI,
    functionName: 'addDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"execute"`.
 */
export function useSimpleAccountExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof simpleAccountABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'execute', TMode>({
    abi: simpleAccountABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"executeBatch"`.
 */
export function useSimpleAccountExecuteBatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'executeBatch'
        >['request']['abi'],
        'executeBatch',
        TMode
      > & { functionName?: 'executeBatch' }
    : UseContractWriteConfig<typeof simpleAccountABI, 'executeBatch', TMode> & {
        abi?: never
        functionName?: 'executeBatch'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'executeBatch', TMode>({
    abi: simpleAccountABI,
    functionName: 'executeBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function useSimpleAccountInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof simpleAccountABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'initialize', TMode>({
    abi: simpleAccountABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSimpleAccountUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof simpleAccountABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'upgradeTo', TMode>({
    abi: simpleAccountABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useSimpleAccountUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof simpleAccountABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'upgradeToAndCall', TMode>({
    abi: simpleAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useSimpleAccountValidateUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'validateUserOp'
        >['request']['abi'],
        'validateUserOp',
        TMode
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<
        typeof simpleAccountABI,
        'validateUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'validateUserOp', TMode>({
    abi: simpleAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"withdrawDepositTo"`.
 */
export function useSimpleAccountWithdrawDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof simpleAccountABI,
          'withdrawDepositTo'
        >['request']['abi'],
        'withdrawDepositTo',
        TMode
      > & { functionName?: 'withdrawDepositTo' }
    : UseContractWriteConfig<
        typeof simpleAccountABI,
        'withdrawDepositTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawDepositTo'
      } = {} as any,
) {
  return useContractWrite<typeof simpleAccountABI, 'withdrawDepositTo', TMode>({
    abi: simpleAccountABI,
    functionName: 'withdrawDepositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__.
 */
export function usePrepareSimpleAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"addDeposit"`.
 */
export function usePrepareSimpleAccountAddDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'addDeposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'addDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'addDeposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareSimpleAccountExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"executeBatch"`.
 */
export function usePrepareSimpleAccountExecuteBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'executeBatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'executeBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'executeBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSimpleAccountInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSimpleAccountUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareSimpleAccountUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof simpleAccountABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareSimpleAccountValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof simpleAccountABI, 'validateUserOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link simpleAccountABI}__ and `functionName` set to `"withdrawDepositTo"`.
 */
export function usePrepareSimpleAccountWithdrawDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof simpleAccountABI, 'withdrawDepositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: simpleAccountABI,
    functionName: 'withdrawDepositTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof simpleAccountABI,
    'withdrawDepositTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__.
 */
export function useSimpleAccountEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    ...config,
  } as UseContractEventConfig<typeof simpleAccountABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useSimpleAccountAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof simpleAccountABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useSimpleAccountBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof simpleAccountABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSimpleAccountInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof simpleAccountABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__ and `eventName` set to `"SimpleAccountInitialized"`.
 */
export function useSimpleAccountSimpleAccountInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, 'SimpleAccountInitialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    eventName: 'SimpleAccountInitialized',
    ...config,
  } as UseContractEventConfig<
    typeof simpleAccountABI,
    'SimpleAccountInitialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link simpleAccountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useSimpleAccountUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof simpleAccountABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: simpleAccountABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof simpleAccountABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sinkABI}__.
 */
export function useSinkWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sinkABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sinkABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof sinkABI, TFunctionName, TMode>({
    abi: sinkABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sinkABI}__ and `functionName` set to `"sink"`.
 */
export function useSinkSink<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sinkABI, 'sink'>['request']['abi'],
        'sink',
        TMode
      > & { functionName?: 'sink' }
    : UseContractWriteConfig<typeof sinkABI, 'sink', TMode> & {
        abi?: never
        functionName?: 'sink'
      } = {} as any,
) {
  return useContractWrite<typeof sinkABI, 'sink', TMode>({
    abi: sinkABI,
    functionName: 'sink',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sinkABI}__.
 */
export function usePrepareSinkWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sinkABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sinkABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sinkABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sinkABI}__ and `functionName` set to `"sink"`.
 */
export function usePrepareSinkSink(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sinkABI, 'sink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sinkABI,
    functionName: 'sink',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sinkABI, 'sink'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__.
 */
export function useSourceAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"deposits"`.
 */
export function useSourceAccountDeposits<
  TFunctionName extends 'deposits',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'deposits',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"gasService"`.
 */
export function useSourceAccountGasService<
  TFunctionName extends 'gasService',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'gasService',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"gateway"`.
 */
export function useSourceAccountGateway<
  TFunctionName extends 'gateway',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'gateway',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"helper_createAndSignInterChainUserOp"`.
 */
export function useSourceAccountHelperCreateAndSignInterChainUserOp<
  TFunctionName extends 'helper_createAndSignInterChainUserOp',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'helper_createAndSignInterChainUserOp',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"helper_hashSigData"`.
 */
export function useSourceAccountHelperHashSigData<
  TFunctionName extends 'helper_hashSigData',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'helper_hashSigData',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"isWithdrawPending"`.
 */
export function useSourceAccountIsWithdrawPending<
  TFunctionName extends 'isWithdrawPending',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'isWithdrawPending',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"proveWithdraw"`.
 */
export function useSourceAccountProveWithdraw<
  TFunctionName extends 'proveWithdraw',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'proveWithdraw',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"value"`.
 */
export function useSourceAccountValue<
  TFunctionName extends 'value',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'value',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"withdrawPeriod"`.
 */
export function useSourceAccountWithdrawPeriod<
  TFunctionName extends 'withdrawPeriod',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'withdrawPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"withdrawTime"`.
 */
export function useSourceAccountWithdrawTime<
  TFunctionName extends 'withdrawTime',
  TSelectData = ReadContractResult<typeof sourceAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof sourceAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sourceAccountABI,
    functionName: 'withdrawTime',
    ...config,
  } as UseContractReadConfig<
    typeof sourceAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__.
 */
export function useSourceAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sourceAccountABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, TFunctionName, TMode>({
    abi: sourceAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"deposit"`.
 */
export function useSourceAccountDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof sourceAccountABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'deposit', TMode>({
    abi: sourceAccountABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"execute"`.
 */
export function useSourceAccountExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof sourceAccountABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'execute', TMode>({
    abi: sourceAccountABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function useSourceAccountExecuteWithToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'executeWithToken'
        >['request']['abi'],
        'executeWithToken',
        TMode
      > & { functionName?: 'executeWithToken' }
    : UseContractWriteConfig<
        typeof sourceAccountABI,
        'executeWithToken',
        TMode
      > & {
        abi?: never
        functionName?: 'executeWithToken'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'executeWithToken', TMode>({
    abi: sourceAccountABI,
    functionName: 'executeWithToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"runProveWithdraw"`.
 */
export function useSourceAccountRunProveWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'runProveWithdraw'
        >['request']['abi'],
        'runProveWithdraw',
        TMode
      > & { functionName?: 'runProveWithdraw' }
    : UseContractWriteConfig<
        typeof sourceAccountABI,
        'runProveWithdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'runProveWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'runProveWithdraw', TMode>({
    abi: sourceAccountABI,
    functionName: 'runProveWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"spenderWithdraw"`.
 */
export function useSourceAccountSpenderWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'spenderWithdraw'
        >['request']['abi'],
        'spenderWithdraw',
        TMode
      > & { functionName?: 'spenderWithdraw' }
    : UseContractWriteConfig<
        typeof sourceAccountABI,
        'spenderWithdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'spenderWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'spenderWithdraw', TMode>({
    abi: sourceAccountABI,
    functionName: 'spenderWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"startWithdraw"`.
 */
export function useSourceAccountStartWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'startWithdraw'
        >['request']['abi'],
        'startWithdraw',
        TMode
      > & { functionName?: 'startWithdraw' }
    : UseContractWriteConfig<
        typeof sourceAccountABI,
        'startWithdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'startWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'startWithdraw', TMode>({
    abi: sourceAccountABI,
    functionName: 'startWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"withdraw"`.
 */
export function useSourceAccountWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sourceAccountABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof sourceAccountABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof sourceAccountABI, 'withdraw', TMode>({
    abi: sourceAccountABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__.
 */
export function usePrepareSourceAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sourceAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareSourceAccountDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sourceAccountABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareSourceAccountExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sourceAccountABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"executeWithToken"`.
 */
export function usePrepareSourceAccountExecuteWithToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'executeWithToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'executeWithToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sourceAccountABI,
    'executeWithToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"runProveWithdraw"`.
 */
export function usePrepareSourceAccountRunProveWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'runProveWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'runProveWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sourceAccountABI,
    'runProveWithdraw'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"spenderWithdraw"`.
 */
export function usePrepareSourceAccountSpenderWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'spenderWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'spenderWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sourceAccountABI,
    'spenderWithdraw'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"startWithdraw"`.
 */
export function usePrepareSourceAccountStartWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'startWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'startWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sourceAccountABI, 'startWithdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sourceAccountABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareSourceAccountWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sourceAccountABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sourceAccountABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sourceAccountABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeManagerABI}__.
 */
export function useStakeManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakeManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stakeManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof stakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStakeManagerBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakeManagerABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof stakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"deposits"`.
 */
export function useStakeManagerDeposits<
  TFunctionName extends 'deposits',
  TSelectData = ReadContractResult<typeof stakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakeManagerABI,
    functionName: 'deposits',
    ...config,
  } as UseContractReadConfig<
    typeof stakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"getDepositInfo"`.
 */
export function useStakeManagerGetDepositInfo<
  TFunctionName extends 'getDepositInfo',
  TSelectData = ReadContractResult<typeof stakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stakeManagerABI,
    functionName: 'getDepositInfo',
    ...config,
  } as UseContractReadConfig<
    typeof stakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__.
 */
export function useStakeManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stakeManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, TFunctionName, TMode>({
    abi: stakeManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function useStakeManagerAddStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          'addStake'
        >['request']['abi'],
        'addStake',
        TMode
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<typeof stakeManagerABI, 'addStake', TMode> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, 'addStake', TMode>({
    abi: stakeManagerABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function useStakeManagerDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          'depositTo'
        >['request']['abi'],
        'depositTo',
        TMode
      > & { functionName?: 'depositTo' }
    : UseContractWriteConfig<typeof stakeManagerABI, 'depositTo', TMode> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, 'depositTo', TMode>({
    abi: stakeManagerABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useStakeManagerUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof stakeManagerABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, 'unlockStake', TMode>({
    abi: stakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useStakeManagerWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<typeof stakeManagerABI, 'withdrawStake', TMode> & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, 'withdrawStake', TMode>({
    abi: stakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useStakeManagerWithdrawTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakeManagerABI,
          'withdrawTo'
        >['request']['abi'],
        'withdrawTo',
        TMode
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof stakeManagerABI, 'withdrawTo', TMode> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof stakeManagerABI, 'withdrawTo', TMode>({
    abi: stakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__.
 */
export function usePrepareStakeManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareStakeManagerAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareStakeManagerDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, 'depositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    functionName: 'depositTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, 'depositTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareStakeManagerUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareStakeManagerWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareStakeManagerWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeManagerABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeManagerABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__.
 */
export function useStakeManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__ and `eventName` set to `"Deposited"`.
 */
export function useStakeManagerDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useStakeManagerStakeLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, 'StakeLocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    eventName: 'StakeLocked',
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, 'StakeLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useStakeManagerStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useStakeManagerStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeManagerABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useStakeManagerWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeManagerABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stakeManagerABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof stakeManagerABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testOracleABI}__.
 */
export function useTestOracleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testOracleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testOracleABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: testOracleABI,
    ...config,
  } as UseContractReadConfig<typeof testOracleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testOracleABI}__ and `functionName` set to `"getTokenValueOfEth"`.
 */
export function useTestOracleGetTokenValueOfEth<
  TFunctionName extends 'getTokenValueOfEth',
  TSelectData = ReadContractResult<typeof testOracleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testOracleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testOracleABI,
    functionName: 'getTokenValueOfEth',
    ...config,
  } as UseContractReadConfig<typeof testOracleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useTestTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTestTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useTestTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"name"`.
 */
export function useTestTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useTestTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTestTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, TFunctionName, TMode>({
    abi: testTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useTestTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof testTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'approve', TMode>({
    abi: testTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTestTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof testTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'decreaseAllowance', TMode>({
    abi: testTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTestTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof testTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'increaseAllowance', TMode>({
    abi: testTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useTestTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof testTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'mint', TMode>({
    abi: testTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useTestTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof testTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'transfer', TMode>({
    abi: testTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTestTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof testTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof testTokenABI, 'transferFrom', TMode>({
    abi: testTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__.
 */
export function usePrepareTestTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTestTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTestTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTestTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTestTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTestTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTestTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: testTokenABI,
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useTestTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTestTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__.
 */
export function useTokenCallbackHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useTokenCallbackHandlerOnErc1155BatchReceived<
  TFunctionName extends 'onERC1155BatchReceived',
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useTokenCallbackHandlerOnErc1155Received<
  TFunctionName extends 'onERC1155Received',
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useTokenCallbackHandlerOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTokenCallbackHandlerSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenCallbackHandlerABI}__ and `functionName` set to `"tokensReceived"`.
 */
export function useTokenCallbackHandlerTokensReceived<
  TFunctionName extends 'tokensReceived',
  TSelectData = ReadContractResult<
    typeof tokenCallbackHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tokenCallbackHandlerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenCallbackHandlerABI,
    functionName: 'tokensReceived',
    ...config,
  } as UseContractReadConfig<
    typeof tokenCallbackHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}
